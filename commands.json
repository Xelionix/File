Bootloader (bootloader.asm):
assembly

section .text
    global _start

_start:
    ; Set up the stack
    mov  esp, 0x7C00
    mov  ebp, 0x7C00

    ; Load the kernel into memory (assumes the kernel is at sector 2)
    mov  ah, 0x02  ; BIOS read sector function
    mov  al, 1     ; Number of sectors to read
    mov  ch, 0     ; Cylinder number
    mov  cl, 2     ; Sector number
    mov  dh, 0     ; Head number
    mov  dl, 0     ; Drive number (boot drive)
    mov  bx, 0x1000  ; Load kernel at address 0x1000
    int  0x13      ; BIOS interrupt

    ; Jump to the kernel
    jmp  0x1000:0

    ; Padding and magic number
    times 510-($-$$) db 0
    dw 0xAA55
Kernel (kernel.asm):
assembly

section .text
    global _start

_start:
    ; Set up the segment registers
    mov ax, 0x07C0
    add ax, 288  ; 0x120
    mov ss, ax
    mov sp, 4096  ; Set stack pointer at 4KB

    ; Call the kernel main function
    call main

    ; Infinite loop to prevent the kernel from executing random data
    cli
    hlt

main:
    ; Print "Hello, World!" to the screen
    mov ah, 0x0E  ; BIOS teletype function
    mov al, 'H'
    int 0x10
    mov al, 'e'
    int 0x10
    mov al, 'l'
    int 0x10
    int 0x10
    mov al, 'o'
    int 0x10
    mov al, ','
    int 0x10
    mov al, ' '
    int 0x10
    mov al, 'W'
    int 0x10
    mov al, 'o'
    int 0x10
    mov al, 'r'
    int 0x10
    mov al, 'l'
    int 0x10
    mov al, 'd'
    int 0x10
    mov al, '!'
    int 0x10

    ; Return from main function
    ret
To compile and run the code, you can use NASM assembler and QEMU emulator:

bash
nasm -f bin bootloader.asm -o bootloader.bin
nasm -f elf kernel.asm -o kernel.o
ld -Ttext 0x1000 --oformat binary kernel.o -o kernel.bin
qemu-system-i386 -drive format=raw,file=bootloader.bin
